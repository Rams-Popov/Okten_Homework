регулярки
метод .test - повертає true/false

reg = /test/
reg.test("My test is bad") - в дужках стрінга яку хочемо перевірити

/test/ - стрінгу яку шукати

reg = /test|pass|fail/ - через пряму лінію можемо вказувати декілька пошуків, якщо хочаб 1 є повертає true

reg = /test/i - i в кінці переводить все в один регістр

reg = /^test/i - шукає на початку стрінги

reg = /test$/i - шукає на кінці стрінги

метод .match - повертає масив знайденого

reg = /test/
"My test is bad".match(reg)

reg = /test/g - g шукає всі схожі входження в рядку і вкладає в масив

reg = /test/gi - підряд записують вирази, які потрібні ще

reg = /hu./gi - крапка означає будь який символ

reg = /b[aiu]g/gi - буде шукати 1 букву - b, останню - g, а в середину буде підставляти по черзі букви з масиву [aiu]

reg = /[a-e]at/gi - вбудований пошук по алфавіту, буде підставляти по одній букві для кожного значення з масиву [a-e]

reg = /[0-5]rt/gi - буде підставляти по одній цифрі для кожного значення

reg = /[a-e0-5]rt/gi - групування цифр з буквами

reg = /[^aeiou]/gi - ^ означає всі крім цих символів

reg = /a+/gi - знаходить і повертає "a", але якщо є аа, то поверне "аа"

reg = /go*/gi - поверне "g", "go" або ("g" + "oooo"),
		  якщо підряд будуть декілька однакових то поверне їх всіх

reg = /*t/gi - остання буква має бути t, /t[a-z]*t/ - поверне з першою буквою t та з останньою

reg = /t[a-z]*?a/gi - знайде слово, виріже з нього все крім першої та останньої, та поверне 2 букви

reg = /^aeiou/gi

reg = /\w/ - це те саме, що й [A-Za-z0-9_], вбудоване в JS

reg = /\W/ - це те саме, що й [^A-Za-z0-9_], вбудоване в JS (шукати окрім)

reg = /\d/ - це те саме, що й [0-9], вбудоване в JS

reg = /\D/ - це те саме, що й [^0-9], вбудоване в JS

/^[a-z][a-z]+\d*$|^[a-z]\d\d+$/i

1.^- початок введення
2.[a-z]- перший символ - буква
3.[a-z]+- наступні символи - літери
4.\d*$- введення закінчується на 0 або більше цифр
5.|- або
6.^[a-z]- перший символ - буква
7.\d\d+- наступні символи містять 2 або більше цифр
8.$- кінець введення

reg = /\s/g - шукає пробілиі [\r\t\f\n\v]
reg = /\S/g - шукає все окрім пробілів [^\r\t\f\n\v]

/oh{3,6}\sno/i - шукає oh, потім пробіл, потім no ({3,6} - нижня та верхня межа входжень)
/oh{3,}\sno/i - можна вказувати тільки мінімальну межу {3,}
/oh{3}\sno/i - можна вказувати точну кылькысть входжень{3}

reg = /colou?r/ - знак питання означає, що попередня перед ним буква може бути, а може і не бути

reg = /q(?=u)/ - шукає після q - u, повертає q або true, якщо правдиво
reg = /q(?!u)/ - шукає після q - все окрім u, повертає q або true, якщо правдиво
reg = /(?=\w{3,6})(?=\D*\d)/ - приклад для "abc123"
(?=\w{6})(?=\w*\d{2}) - шукає щоб були букви та цифри (мінімум 6), та щоб 2 останні були цифрою

/^(\d+)\s\1\s\1$/ - шукає числа на початку та записує їх в змінну 1$

"Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1'); - міняє містами ці два слова

let result = "one two three".replace(/(\w+)\s(\w+)\s(\w+)/, "$3 $2 $1"); - result === "three two "one"
/^\s+|\s+$/ - шукає пробіли на початку і в кінці